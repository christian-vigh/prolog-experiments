bound(X) :-
	nonvar(X), !.

unbound(X) :-
	var(X), !.

undefined( Name, Value ) :-
	atom_concat( 'kr$', Name, Func ),
	Goal =.. [Func, Value],
	call(Goal),
	fail, !.
undefined( _, _ ).

defined( Name, Value ) :-
	atom_concat( 'kr$', Name, Func ),
	Goal =.. [Func, Value],
	call(Goal), !.
defined( _, _ ) :- !.


object(Name) :-
	bound(Name), undefined(object, Name),
	create_object(Name).
object(Name) :-
	bound(Name), defined(object, Name),
	write('error : the object '''), write(Name), write(''' is already defined.'),
	nl, fail, !.
object(Name) :-
	kr$object(Name).


create_object(Name, Template, ParmList) :-
	atom_concat('kr$', Name, KRName),
	Func =.. [Template | ParmList],
	repeat,
		(
			clause( Func, Body ),
			string_term(Str, Body),
			string_tokens(Str, BodyList),
			create_body(BodyList, Name, KRName, Result),
			write(Result), nl
		  ; ! ),		% When the clause/2 predicate fails
	fail.
create_object(Name, Template, ParmList).

create_body(BodyList, Name, KRName, Result) :-
	create_object_body(BodyList, Name, KRName, Result), !.
		
create_object_body([], _, _, []) :- !.
create_object_body([keyword_name|Tail], Name, KRName, [Name|Result]) :-
	create_object_body(Tail, Name, KRName, Result).
create_object_body([keyword_internal|Tail], Name, KRName, [KRName|Result]) :-
	create_object_body(Tail, Name, KRName, Result).
create_object_body([Head|Tail], Name, KRName, [Head|Result]) :-
	create_object_body(Tail, Name, KRName, Result).
	

kr$object_template(Word) :-
	bound(Word), undefined(keyword_name, Word),
	assert( keyword_name( Word ) ).
kr$object_template(Word) :-
	bound(Word), defined(keyword_name, Word),
	write('error : the '''), write(keyword_internal), write(''' is already defined.'),
	nl, fail, !.
kr$object_template(Word) :-
	keyword_name(Word).
