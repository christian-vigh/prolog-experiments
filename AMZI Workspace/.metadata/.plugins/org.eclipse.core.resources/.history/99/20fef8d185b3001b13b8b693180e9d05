

:- op( 500, xfx, covers ).
:- op( 700, xfx, ..).
:- op( 700, xfx, within).
:- op( 700, xfx, outside).



% Assignment operator
X covers interval(Left, Low .. High, Right) :-		% X covers interval(<,1-100,>)
	interval( X, Left, Low, High, Right ).

X covers interval(Low .. High) :-			% X covers interval(1-100) :
	interval(X, <, Low, High, >).			% Inclusive interval

X covers Low .. High :-					% X covers 1-100 : inclusive interval
	interval(X, <, Low, High, >).

X covers <>(Low .. High) :-				% X covers <>(1-100) left- and right-inclusive
	interval( X, <, Low, High, > ).
X covers <<(Low .. High) :-				% X covers <<(1-100) left-inclusive, right-exclusive
	interval( X, <, Low, High, < ).
X covers >>(Low .. High) :-				% X covers >>(1-100) left-exclusive, right-inclusive
	interval( X, >, Low, High, > ).
X covers ><(Low .. High) :-				% X covers ><(1-100) left-exclusive, right-exclusive
	interval( X, >, Low, High, < ).


X covers [L..H|T] :-					% Multiple disjoint intervals
	XH covers L..H,					% using the interval() functor
	XT covers T,
	X = [XH | XT].
	
X covers [H|T] :-					% Multiple disjoint intervals
	XH covers H,					% using the interval() functor
	XT covers T,
	X = [XH | XT].
[] covers [].


% Build an interval
interval(X, Left, Low, High, Right) :-
	interval_left(  Left,  Low, Value1, LGT, LLT),
	interval_right(Right, High, Value2, RGT, RLT),
	X = [Left, Value1, Value2, Right, LGT, LLT, RGT, RLT].
	

% Aliases for infinity
infinity('inf').
infinity('infinite').
infinity('infinity').


% Check exclusion/inclusion of low value
% (allow inclusive range for infinity)
interval_left(_, Keyword, -inf, >, <) :-
	infinity(Keyword).
interval_left(>, inf, -inf, >, <).
interval_left(>, Value, Value, >, =<).
interval_left(<, Value, Value, >=, <).	


interval_right(_, Keyword, +inf, >, <) :-
	infinity(Keyword).
interval_right(>, inf, +inf, >, <).
interval_right(>, Value, Value, >, =<).
interval_right(<, Value, Value, >=, <).	


% Get operator
interval_get([_, V, _, _,  _,  _,  _,  _], value1,  V).
interval_get([_, _, V, _,  _,  _,  _,  _], value2,  V).
interval_get([_, _, _, _, Op,  _,  _,  _],    lgt, Op).
interval_get([_, _, _, _,  _, Op,  _,  _],    llt, Op).
interval_get([_, _, _, _,  _,  _, Op,  _],    rgt, Op).
interval_get([_, _, _, _,  _,  _,  _, Op],    rlt, Op).

interval_apply(Op, V1, V2) :-
	X =.. [Op, V1, V2],
	call(X).
	
	
% Test if a value is within or outside a range
Value within X :-
	interval_get(X, value1, V1),
	interval_get(X, value2, V2),
	interval_get(X,    lgt, LGT),
	interval_get(X,    rlt, RLT),
	interval_apply(LGT, Value, V1),
	interval_apply(RLT, Value, V2).
	
Value outside X :-
	not( Value within X ).