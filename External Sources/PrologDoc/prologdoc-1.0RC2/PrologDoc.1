.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PROLOGDOC 1"
.TH PROLOGDOC 1 "2004-11-13" "PrologDoc 1.0RC2" "Prolog Utilities"
.SH "What is PrologDoc?"
.IX Header "What is PrologDoc?"
PrologDoc is a system that automatically generates \s-1HTML\s0 documention
from Prolog programs.
.PP
\&\s-1HTML\s0 documentation can be automatically created from any Prolog
program. In addition, by documenting your program according to the
PrologDoc syntax, you can enable the PrologDoc documentation to be
even more useful for you.
.PP
PrologDoc can be run on a list of files to generate not only
documentation about each file, but also an index file specifying all
the files documented.
.SH "Running PrologDoc"
.IX Header "Running PrologDoc"
To run PrologDoc over a set of prolog source files use the command
\&\fIpldoc\fR\|(1).
.PP
Example:
.PP
.Vb 1
\&  $ pldoc --to docs/ foo.pl bar.pl
.Ve
.SH "Automatically Generated Information"
.IX Header "Automatically Generated Information"
When documenting a Prolog program \f(CW\*(C`filename\*(C'\fR, the following
information is automatically inserted in PrologDoc documentation, without
user intervention:
.IP "Files" 4
.IX Item "Files"
that \f(CW\*(C`filename\*(C'\fR consults.
.Sp
Example: if \f(CW\*(C`filename\*(C'\fR contains
.Sp
.Vb 1
\&  :- [file1,file2].
.Ve
.Sp
then file1 and file2 will be included in this list.
.IP "Libraries" 4
.IX Item "Libraries"
that \f(CW\*(C`filename\*(C'\fR uses.
.Sp
Example: if \f(CW\*(C`filename\*(C'\fR contains
.Sp
.Vb 1
\&  :- use_module(library(system)).
.Ve
.Sp
then system will be included in this list.
.IP "Side-effects" 4
.IX Item "Side-effects"
encountered when loading \f(CW\*(C`filename\*(C'\fR.
.Sp
Example: if \f(CW\*(C`filename\*(C'\fR contains
.Sp
.Vb 1
\&  :- foo(bar).
.Ve
.Sp
then this predicate will be included in this list.
.Sp
Note: generation of side effects documentation is toggled off by
default. Use
.Sp
.Vb 1
\&  $ pldoc --side-effects ...
.Ve
.Sp
to activate it.
.IP "Predicates" 4
.IX Item "Predicates"
defined in \f(CW\*(C`filename\*(C'\fR.
.Sp
Note: This list will include only exported predicates if \f(CW\*(C`filename\*(C'\fR
is defined as a module.
.IP "Module name" 4
.IX Item "Module name"
if \f(CW\*(C`filename\*(C'\fR is defined as a module.
.SH "Predicate Specific Comments"
.IX Header "Predicate Specific Comments"
Using the PrologDoc syntax enables you to extensively document
predicates that you define. A PrologDoc predicate comment is defined within
.PP
.Vb 1
\&   /** blah, blah, blah... */
.Ve
.PP
It should be placed immediately before the predicate it is
documenting.  The PrologDoc syntax is similar to JavaDoc. The
following tags can be used within a predicate comment:
.IP "@descr" 4
.IX Item "@descr"
For giving a general description of the predicate
.IP "@form" 4
.IX Item "@form"
is used to define the general form of the predicate
.IP "@constraints" 4
.IX Item "@constraints"
Used to define constraints on the parameters.
.Sp
After a \f(CW@contraints\fR tag there can be a series of:
.RS 4
.IP "@ground" 4
.IX Item "@ground"
to define a parameter that must be ground
.IP "@unground" 4
.IX Item "@unground"
to define a parameter that can not be ground
.IP "@unrestricted" 4
.IX Item "@unrestricted"
to define a parameter that is not restricted
.RE
.RS 4
.Sp
There can be several \f(CW@constraints\fR tags to define different
options of constraining parameters.
.Sp
Example: the following could be a predicate comment for the member
predicate:
.Sp
.Vb 9
\&  /** @form member(Value,List)
\&      @constraints
\&         @ground Value
\&         @unrestricted List
\&      @constraints
\&         @unrestricted Value
\&         @ground List
\&      @descr True if Value is a member of List
\&  */
.Ve
.RE
.SH "General File Comments"
.IX Header "General File Comments"
Using PrologDoc you can give a general description to the
file. This enables you to globally document the purpose of the prolog program
defined within. A general file comment is defined within
.PP
.Vb 1
\&  /*** blah, blah, blah... */
.Ve
.PP
and may be located anywhere in the file. The following tags can be used within
a predicate comment:
.PP
@descr
.PP
for giving a general description of the file
.PP
@author
.PP
to specify the name of an author
.PP
@date
.PP
to specify the date creation of the file
.PP
Note: since the values of the tags are copied \*(L"as is\*(R" into the \s-1HTML\s0
documentation, \s-1HTML\s0 tags may be used within these values.
.PP
Example:
.PP
.Vb 8
\&  /*** @descr This file is used for many thing. Among them are:
\&          <ul>
\&            <li> Purpose 1 ?
\&            <li> Purpose 2 ?
\&          </ul>
\&       @author John Smith
\&       @date 1/1/00
\&  */
.Ve
.SH "See Also"
.IX Header "See Also"
\&\fIpldoc\fR\|(1) manual.
PrologDoc website at SourceForge <http://prologdoc.sourceforge.net>.
.SH "Copyright and License"
.IX Header "Copyright and License"
Copyright (C) 1999 by Elisheva Bonchek (le7bonch \s-1AT\s0 cs.huji.ac.il)
and Sara Cohen (sarac \s-1AT\s0 ie.technion.ac.il, http://iew3.technion.ac.il/~sarac).
Copyright (C) 2004 by Bram Adams (bram.adams \s-1AT\s0 ugent.be).
Copyright (C) 2004 by Salvador Fandino (sfandino@yahoo.com).
.PP
PrologDoc is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.
.PP
PrologDoc is distributed in the hope that it will be useful, but
\&\s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0
General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with PrologDoc; if not, write to the Free Software Foundation,
Inc., 59 Temple Place, Suite 330, Boston, \s-1MA\s0 02111\-1307 \s-1USA\s0
