%   File   : UTIL.HLP
%   Author : L. Hardman
%   Updated: 14 August 1984
%   Purpose: Maintain an up-to-date list of predicates in UTIL.


\=(Item1, Item2)					%UTIL:IMISCE.PL

add(Rational1, Rational2, Rational1+Rational2)		%UTIL:LONG.PL
add_element(Element, Set, Set+Element)			%UTIL:SETUTL.PL
add_to_heap(Heap, Key, Item, NewHeap)			%UTIL:HEAPS.PL
advise(Predicate, Port, Action)				%UTIL:ADVICE.PL
advised(Predicate)					%UTIL:ADVICE.PL
and_to_list(Conjunction, List)				%UTIL:FLAT.PL
append(List1, List2, List1List2)			%UTIL:LISTUT.PL
apply(Predicate, Arguments)				%UTIL:APPLIC.PL
array_length(Array+Updates, Length)			%UTIL:ARRAYS.PL
array_to_list(Array+Updates, List)			%UTIL:ARRAYS.PL
ask(Question, Answer)					%UTIL:ASK.PL
ask(Question, Default, Answer)				%UTIL:ASK.PL
ask_default_character(Specification, Character)		%UTIL:ASK.PL
assoc_to_list(Association, List)			%UTIL:ASSOC.PL

backup(Filename)					%UTIL:BACKUP.PL
backup(Filename, BackUpExtension)			%UTIL:BACKUP.PL
bag_inter(Bag1, Bag2, Intersection)			%UTIL:BAGUTL.PL
bag_of(Template, Generator, Bag)			%UTIL:SETOF.PL
bag_to_list(Bag, List)					%UTIL:BAGUTL.PL
bag_to_set(Bag, Set_List)				%UTIL:BAGUTL.PL
bag_union(Bag1, Bag2, Union)				%UTIL:BAGUTL.PL
bagmax(Bag, Most_Frequent_Element)			%UTIL:BAGUTL.PL
bagmin(Bag, Least_Frequent_Element)			%UTIL:BAGUTL.PL
binary_to_list(Tree, Operator, Before, After)		%UTIL:FLAT.PL
binary_to_list(Tree, Operator, Unit, Before, After)	%UTIL:FLAT.PL

ca							%UTIL:PP.PL
ca(AtomPattern)						%UTIL:PP.PL
ca(AtomPattern, AnswerList)				%UTIL:PP.PL
callable(Form)						%UTIL:APPLIC.PL
case_shift(MixedCases, LowerCase)			%UTIL:RDSENT.PL
casserta(Clause)					%UTIL:IMISCE.PL
cassertz(Clause)					%UTIL:IMISCE.PL
cf							%UTIL:PP.PL
cf(TermPattern)						%UTIL:PP.PL
cf(TermPattern, AnswerList)				%UTIL:PP.PL
cgensym(Prefix, NewAtom)				%UTIL:GENSYM.PL
chars_to_words(Characters, Words)			%UTIL:RDSENT.PL
checkand(Predicate, Conjunction)			%UTIL:APPLIC.PL
checkbag(Predicate, Bag)				%UTIL:BAGUTL.PL
checklist(Predicate, List)				%UTIL:APPLIC.PL
clean							%UTIL:IMISCE.PL
close(File, OldFile)					%UTIL:FILES.PL
co							%UTIL:PP.PL
co(OperatorPattern)					%UTIL:PP.PL
co(OperatorPattern, AnswerList)				%UTIL:PP.PL
co(Priority, Type, Atom)				%UTIL:PP.PL
compound(Term)						%UTIL:METUTL.PL
concat(Const1, Const2, Const1Const2)			%UTIL:GENSYM.PL
contains(Term, Expression)				%UTIL:OCCUR.PL
convlist(Rewrite, List, NewList)			%UTIL:APPLIC.PL
copy(Old, New)						%UTIL:METUTL.PL
copy_ground(Term, Copy, Substitution)			%UTIL:STRUCT.PL
correspond(Element1, List1, List2, Element2)		%UTIL:LISTUT.PL
count							%UTIL:COUNT.PL
cp							%UTIL:PP.PL
cp(TermPattern)						%UTIL:PP.PL
cp(TermPattern, AnswerList)				%UTIL:PP.PL

del_element(Element, Set, Set_-_Element)		%UTIL:SETUTL.PL
delete(List, Element, List_-_Element)			%UTIL:LISTUT.PL
delete(OpenFile)					%UTIL:FILES.PL
disjoint(Set)						%UTIL:SETUTL.PL
disjoint(Set1, Set2)					%UTIL:SETUTL.PL

edit(File)						%UTIL:EDIT.PL
empty_queue(Queue)					%UTIL:QUEUES.PL
error(Format, List, Action)				%UTIL:TRACE.PL
eval(Expression)					%UTIL:LONG.PL
eval(Expression, Answer)				%UTIL:LONG.PL
exclude(Predicate, List, SubList)			%UTIL:APPLIC.PL
expand(File, NewFile)					%UTIL:EXPAND.PL

fetch(Index, Array, History)				%UTIL:ARRAYS.PL
file_exists(File)					%UTIL:FILES.PL
findall(Template, Generator, List)			%UTIL:SETOF.PL
findall(Template, Generator, SoFar, List)		%UTIL:SETOF.PL
flag(Flag, InitialValue)				%UTIL:FLAGRO.PL
flag(Flag, Value, NewValue)				%UTIL:FLAGRO.PL
flatten(List, Flat)					%UTIL:FLAT.PL
forall(Generator, Test)					%UTIL:INVOCA.PL
freeof(Term, Expression)				%UTIL:OCCUR.PL
fwritef(File, Format)					%UTIL:WRITEF.PL
fwritef(File, Format, List)				%UTIL:WRITEF.PL

gcc(Item)						%UTIL:IMISCE.PL
gen_assoc(Association, Key, Value)			%UTIL:ASSOC.PL
gensym(Prefix, Symbol)					%UTIL:GENSYM.PL
get_assoc(Key, Association , Value)			%UTIL:ASSOC.PL
get_from_heap(Heap, Key, Item, NewHeap)			%UTIL:HEAPS.PL
get_label(Index, Tree, Label)				%UTIL:TREES.PL
give_help						%UTIL:HELPER.PL
give_help(Area)						%UTIL:HELPER.PL
give_help(Area, Topic)					%UTIL:HELPER.PL
ground(Term)						%UTIL:METUTL.PL

head_queue(Queue, Head)					%UTIL:QUEUES.PL
heap_size(Heap, Number_of_Elements_in_Heap)		%UTIL:HEAPS.PL
heap_to_list(Heap, List)				%UTIL:HEAPS.PL
help							%UTIL:HELP.PL
help(Predicate)						%UTIL:HELP.PL
help(Predicate, Arity)					%UTIL:HELP.PL

intersect(Set1, Set2)					%UTIL:SETUTL.PL
intersect(Set1, Set2, Intersection)			%UTIL:SETUTL.PL
is_bag(Bag)						%UTIL:BAGUTL.PL
is_digit(Char_Digit)					%UTIL:RDSENT.PL
is_endfile(Char_^Z)					%UTIL:RDSENT.PL
is_layout(Char_Tab_NewLine_^S_etc)			%UTIL:RDSENT.PL
is_letter(Char_LowerCase+UpperCase)			%UTIL:RDSENT.PL
is_lower(Char_LowerCase)				%UTIL:RDSENT.PL
is_newline(Char_NewLine)				%UTIL:RDSENT.PL
is_paren(Left_'([{<', Right_'>}]) ')			%UTIL:RDSENT.PL
is_period(Char_'.?!')					%UTIL:RDSENT.PL
is_punct(Char_',;:')					%UTIL:RDSENT.PL
is_upper(Char_UpperCase)				%UTIL:RDSENT.PL
ixref(Files)						%UTIL:IXREF.PL

join_queue(Element, Queue, NewQueue)			%UTIL:QUEUES.PL
jump_queue(Element, Queue, NewQueue)			%UTIL:QUEUES.PL

keys_and_values(PairList, KeyList, ValList)		%UTIL:PROJEC.PL

last(LastElement, List)					%UTIL:LISTUT.PL
length(Bag, Total_Number_of_Elts, Number_of_Distinct_Elts)%UTIL:BAGUTL.PL
length_queue(Queue, Number_of_Elements_in_Queue)	%UTIL:QUEUES.PL
lib(File)						%UTIL:LIB2.PL
lib(File, Found)					%UTIL:LIB2.PL
list_join_queue(List, Queue, NewQueue)			%UTIL:QUEUES.PL
list_jump_queue(List, Queue, NewQueue)			%UTIL:QUEUES.PL
list_to_and(List, Conjunction)				%UTIL:FLAT.PL
list_to_array(List, Array)				%UTIL:ARRAYS.PL
list_to_assoc(List, Association)			%UTIL:ASSOC.PL
list_to_bag(List, Bag)					%UTIL:BAGUTL.PL
list_to_binary(List, Operator, Tree)			%UTIL:FLAT.PL
list_to_binary(List, Operator, Unit, Tree)		%UTIL:FLAT.PL
list_to_heap(List, Heap)				%UTIL:HEAPS.PL
list_to_or(List, Disjunction)				%UTIL:FLAT.PL
list_to_ord_set(List, OrderedSet)			%UTIL:ORDSET.PL
list_to_plus(List, Sum)					%UTIL:FLAT.PL
list_to_queue(List, Queue)				%UTIL:QUEUES.PL
list_to_times(List, Product)				%UTIL:FLAT.PL
list_to_tree(List, Tree)				%UTIL:TREES.PL
listtoset(List, Set)					%UTIL:SETUTL.PL
load(Files)						%UTIL:TYPECH.PL

make_queue(Queue)					%UTIL:QUEUES.PL
make_sub_bag(Bag, SubBag)				%UTIL:BAGUTL.PL
map_assoc(Predicate, Association, Association)		%UTIL:ASSOC.PL
map_tree(Predicate, Tree, NewTree)			%UTIL:TREES.PL
mapand(Rewrite, Conjunction, NewConjunction)		%UTIL:APPLIC.PL
mapbag(Predicate, Bag, NewBag)				%UTIL:BAGUTL.PL
maplist(Predicate, List, NewList)			%UTIL:APPLIC.PL
medic(File)						%UTIL:MEDIC.PL
member(Element, Multiplicity, Bag)			%UTIL:BAGUTL.PL
member(Element, Set)					%UTIL:SETUTL.PL
memberchk(Element, Set)					%UTIL:SETUTL.PL
merge(List1, List2, MergedList)				%UTIL:ORDSET.PL
min_of_heap(Heap, SmallestKey, Item)			%UTIL:HEAPS.PL
min_of_heap(Heap, SmallestKey1, Item1, NextSmallestKey2, Item2)%UTIL:HEAPS.PL
multiply(Rational1, Rational2, Rational1*Rational2)	%UTIL:LONG.PL

nextto(Element_K, Element_K+1, List)			%UTIL:LISTUT.PL
nmember(Element_K, List, K)				%UTIL:LISTUT.PL
not(Goal)						%UTIL:INVOCA.PL
not(Goal)						%UTIL:NOT.PL
note_lib(File)						%UTIL:LIB2.PL
note_lib(File, Reconsult_or_Compile)			%UTIL:LIB2.PL
number(Rational_Number)					%UTIL:LONG.PL
numlist(LowInteger, HighInteger, List_of_Integers)	%UTIL:LISTUT.PL

occ(Subterm, Term, Number_of_Occurrences)		%UTIL:STRUCT.PL
occurs_check(Term, Variable)				%UTIL:METUTL.PL
occurs_in(Variable, Term)				%UTIL:METUTL.PL
on(Command, File)					%UTIL:PP.PL
once(Goal)						%UTIL:INVOCA.PL
open(File)						%UTIL:FILES.PL
open(OldFile, File)					%UTIL:FILES.PL
or_to_list(Disjunction, List)				%UTIL:FLAT.PL
ord_disjoint(Set1, Set2)				%UTIL:ORDSET.PL
ord_insert(Set1, Elem,  Set2)				%UTIL:ORDSET.PL
ord_intersect(Set1, Set2)				%UTIL:ORDSET.PL
ord_intersect(Set1, Set2, Intersection)			%UTIL:ORDSET.PL
ord_seteq(Set1, Set2)					%UTIL:ORDSET.PL
ord_subset(SubSet, Set)					%UTIL:ORDSET.PL
ord_subtract(Set1, Set2, Set1-Set2)			%UTIL:ORDSET.PL
ord_symdiff(Set1, Set2, Set1-Set2_+_Set2-Set1)		%UTIL:ORDSET.PL
ord_union(Set1, Set2, Union)				%UTIL:ORDSET.PL

p_to_s_graph(P_Graph, S_Graph)				%UTIL:GRAPHS.PL
pairfrom(Set, Element1, Element2, Residue)		%UTIL:SETUTL.PL
patharg(Path, Expression, Term)				%UTIL:OCCUR.PL
perm(List, PermutedList)				%UTIL:LISTUT.PL
perm2(Item1, Item2, Item1_or_2, Item2_or_1)		%UTIL:LISTUT.PL
plus(Integer1, Integer2, Integer1+Integer2)		%UTIL:SUCC.PL
plus_to_list(Sum, List)					%UTIL:FLAT.PL
portray_bag(Bag)					%UTIL:BAGUTL.PL
portray_number(Rational_Number)				%UTIL:LONG.PL
position(Term, Expression, Path)			%UTIL:OCCUR.PL
power(Rational1, Rational2, Rational1^Rational2)	%UTIL:LONG.PL
pp							%UTIL:PP.PL
pp(TermPattern_or_help)					%UTIL:PP.PL
prconj(Conjunction)					%UTIL:WRITEF.PL
prexpr(Expression)					%UTIL:WRITEF.PL
prlist(List)						%UTIL:WRITEF.PL
project(Structures, K, List_of_Kth_Arguments)		%UTIL:PROJEC.PL
put_assoc(Key, Association, New)			%UTIL:ASSOC.PL
put_label(Index, Tree, Label, NewTree)			%UTIL:TREES.PL

queue_to_list(Queue, List)				%UTIL:QUEUES.PL

read(Answer, Variables)					%UTIL:READ.PL
read_in(Words)						%UTIL:READIN.PL
read_line(Characters)					%UTIL:RDSENT.PL
read_sent(Words)					%UTIL:RDSENT.PL
read_tokens(TokenList, VariableList)			%UTIL:RDTOK.PL
read_until(Delimiters, Answer)				%UTIL:RDSENT.PL
redo(File)						%UTIL:EDIT.PL
remove_dups(List, PrunedList)				%UTIL:LISTUT.PL
replace(Path, Expression, SubTerm, NewExpression)	%UTIL:OCCUR.PL
reverse(List, ReversedList)				%UTIL:LISTUT.PL

s_to_p_graph(S_Graph, P_Graph)				%UTIL:GRAPHS.PL
s_to_p_trans(S_Graph, Transposed_P_Graph)		%UTIL:GRAPHS.PL
select(Element, Set, Residue)				%UTIL:SETUTL.PL
serve_queue(Queue, Head, NewQueue)			%UTIL:QUEUES.PL
set_of(Template, Generator, Set)			%UTIL:SETOF.PL
seteq(Set1, Set2)					%UTIL:SETUTL.PL
sf							%UTIL:IXREF.PL
sf(Pattern)						%UTIL:IXREF.PL
sf(Pattern, Files)					%UTIL:IXREF.PL
sick(Functor, Arity)					%UTIL:MEDIC.PL
simple(Term)						%UTIL:METUTL.PL
simple(Term)						%UTIL:STRUCT.PL
some(Predicate, List)					%UTIL:APPLIC.PL
somechk(Predicate, List)				%UTIL:APPLIC.PL
sp(Limits)						%UTIL:IXREF.PL
sp(Limits, Paths)					%UTIL:IXREF.PL
store(Index, Array+Updates, Element, NewArray+NewUpdates)%UTIL:ARRAYS.PL
sublist(Predicate, List, SubList)			%UTIL:APPLIC.PL
subseq(Set, SubSSet, Complement)			%UTIL:LISTUT.PL
subseq0(Sequence, SubSequence)				%UTIL:LISTUT.PL
subseq1(Sequence, ProperSubSequence)			%UTIL:LISTUT.PL
subset(Subset, Set)					%UTIL:SETUTL.PL
subst(Substitution, Term, Result)			%UTIL:STRUCT.PL
subsumes(General, Specific)				%UTIL:METUTL.PL
subsumes_chk(General, Specific)				%UTIL:METUTL.PL
subterm(SubTerm, Term)					%UTIL:METUTL.PL
subtract(Set1, Set2, Set1-Set2)				%UTIL:SETUTL.PL
succ(Predecessor, Successor)				%UTIL:ARITH.PL
sumlist(List_of_Integers, Sum_of_Integers)		%UTIL:LISTUT.PL
symdiff(Set1, Set2, Set1-Set2_+_Set2-Set1)		%UTIL:SETUTL.PL

talk_to_user_while(Goal)				%UTIL:ASK.PL
test_sub_bag(SubBag, Bag)				%UTIL:BAGUTL.PL
tidy(MessyExpression, TidyExpression)			%UTIL:TIDY.PL
tidy_withvars(MessyExpression, TidyExpression)		%UTIL:TIDY.PL
times_to_list(Product, List)				%UTIL:FLAT.PL
tlim(TracingLevel)					%UTIL:TRACE.PL
toff							%UTIL:TRACE.PL
toff(Name)						%UTIL:TRACE.PL
ton(Name)						%UTIL:TRACE.PL
trace(Format, List, Name)				%UTIL:TRACE.PL
trace(Format, TracingLevel)				%UTIL:TRACE.PL
transpose(S_Graph, Transposed_S_Graph)			%UTIL:GRAPHS.PL
tree_size(Tree, Number_Elements_in_Tree)		%UTIL:TREES.PL
tree_to_list(Tree, List)				%UTIL:TREES.PL
trim_blanks(RawInput, Cleaned)				%UTIL:RDSENT.PL
try_hard_to_see(Title, DeviceDflts, ExtensionDflts)	%UTIL:TRYSEE.PL
try_hard_to_see(Title, DeviceDflts, ExtensionDflts, FileFound)%UTIL:TRYSEE.PL
ttyprint(Term)						%UTIL:WRITEF.PL
ty(FileList)						%UTIL:TYPE.PL
type(FileList)						%UTIL:TYPE.PL
type_check(Given, Pruned)				%UTIL:TYPECH.PL

unadvise(Predicate, Port)				%UTIL:ADVICE.PL
unify(Var1, Var2)					%UTIL:METUTL.PL
union(Set1, Set2, Union)				%UTIL:SETUTL.PL
update(Template, Generator)				%UTIL:UPDATE.PL

var_member_chk(Variable, List)				%UTIL:METUTL.PL
variables(Term, VariableList)				%UTIL:STRUCT.PL
variables_of(Term, Variables)				%UTIL:METUTL.PL
variant(Term1, Term2)					%UTIL:METUTL.PL
vcheck							%UTIL:VCHECK.PL
vcheck(File)						%UTIL:VCHECK.PL

warshall(S_Graph, TransitiveClosure)			%UTIL:GRAPHS.PL
well(Functor, Arity)					%UTIL:MEDIC.PL
writef(Format)						%UTIL:WRITEF.PL
writef(Format, Item)					%UTIL:WRITEF.PL

yesno(Question)						%UTIL:ASK.PL
yesno(Question, Default)				%UTIL:ASK.PL
