%=========================================================================
%
% LOGARITHMIC ARRAYS (Extendable arrays with logarithmic access time)
% by David Warren (somewhat modified by Fernando Pereira)
%
% Array extends from 0 to 2**Size - 1, where Size is a multiple of 2.
% Note that 2**Size = 1<<Size.
%
% External interface
%
% new_array(A) returns an empty new array A.
%
% is_array(A) checks whether A is an array.
%
% aref(Index,Array,Element) unified Element to Array[Index], or fails
%   if Array[Index] has not been set.
%
% arefa(Index,Array,Element) is as aref/3, except that it unifies
%   Element with a new array if Array[Index] is undefined. This
%   is useful for multidimensional arrays implemented as arrays of
%   arrays.
%
% arefl(Index,Array,Element) is as aref/3, except that Element appears
%   as '[]' for undefined cells.
%
% aset(Index,Array,Element,NewArray) unifies NewArray with the result
%   of setting Array[Index] to Element.
%
% array_to_list(Array,List) returns a list of pairs Index-Element
%   of all the elements of Array that have been set.

/*
:- public new_array/1, is_array/1, aref/3, arefa/3, arefl/3, aset/4,
          array_to_list/2.

:- mode new_array(-).
*/

new_array(array($($,$,$,$),2)).

/*
:- mode is_array(+).
*/

is_array(array(_,_)).

/*
:- mode aref(+,+,?).
*/

aref(Index,array(Array,Size),Item) :-
   check_int(Index),
   Index < 1<<Size,
   N is Size-2, Subindex is Index>>N /\ 3,
   array_item(Subindex,N,Index,Array,Item).

/*
:- mode array_to_list(+,-).
*/

array_to_list(array($(A0,A1,A2,A3),Size),L0) :-
   N is Size-2,
   subarray_to_list(0,N,0,A0,L0,L1),
   subarray_to_list(1,N,0,A1,L1,L2),
   subarray_to_list(2,N,0,A2,L2,L3),
   subarray_to_list(3,N,0,A3,L3,[]).

/*
:- mode arefa(+,+,?).
*/

arefa(Index,array(Array,Size),Item) :-
   check_int(Index),
   Index < 1<<Size,
   N is Size-2, Subindex is Index>>N /\ 3,
   array_item(Subindex,N,Index,Array,Item), !.
arefa(_,_,Item) :- new_array(Item).

/*
:- mode arefl(+,+,?).
*/

arefl(Index,array(Array,Size),Item) :-
   check_int(Index),
   Index < 1<<Size,
   N is Size-2, Subindex is Index>>N /\ 3,
   array_item(Subindex,N,Index,Array,Item), !.
arefl(_,_,[]).

/*
:- mode aset(+,+,+,-).
*/

aset(Index,array(Array0,Size0),Item,array(Array,Size)) :-
   check_int(Index),
   enlarge_array(Index,Size0,Array0,Size,Array1),
   update_array_item(Size,Index,Array1,Item,Array).

check_int(I) :- integer(I), !.
check_int(X) :-
   display('Array index not integer: '), display(X), nl,
   trace,
   fail.

% Guts

/*
:- mode	array_item(+,+,+,+,?),
	not_undef(+),
	subarray(+,+,?),
	update_subarray(+,+,?,?,-),
        subarray_to_list(+,+,+,+,?,?).
*/

enlarge_array(I,Size,Array,Size,Array) :- I < 1<<Size, !.
enlarge_array(I,Size0,Array0,Size,Array) :-
   Size1 is Size0 + 2,
   Array1 = $(Array0, $,$,$),
   enlarge_array(I,Size1,Array1,Size,Array).

array_item(0,0,Index,$(Item,_,_,_),Item) :- !, not_undef(Item).
array_item(0,N,Index,$(Array,_,_,_),Item) :-
   N1 is N-2,
   Subindex is Index >> N1 /\ 3,
   array_item(Subindex,N1,Index,Array,Item).
array_item(1,0,Index,$(_,Item,_,_),Item) :- !, not_undef(Item).
array_item(1,N,Index,$(_,Array,_,_),Item) :-
   N1 is N-2,
   Subindex is Index >> N1 /\ 3,
   array_item(Subindex,N1,Index,Array,Item).
array_item(2,0,Index,$(_,_,Item,_),Item) :- !, not_undef(Item).
array_item(2,N,Index,$(_,_,Array,_),Item) :-
   N1 is N-2,
   Subindex is Index >> N1 /\ 3,
   array_item(Subindex,N1,Index,Array,Item).
array_item(3,0,Index,$(_,_,_,Item),Item) :- !, not_undef(Item).
array_item(3,N,Index,$(_,_,_,Array),Item) :-
   N1 is N-2,
   Subindex is Index >> N1 /\ 3,
   array_item(Subindex,N1,Index,Array,Item).

not_undef($) :- !, fail.
not_undef(_).

%% [BEFORE OPEN-CODING 'subarray']
%%
%% array_item(0,Index,Item,Item) :- !, not_undef(Item).
%% array_item(N,Index,Array,Item) :-
%%    N1 is N-2,
%%    Subindex is Index >> N1 /\ 3,
%%    subarray(Subindex,Array,Array1),
%%    array_item(N1,Index,Array1,Item).
%%
%% subarray(0,$(X,_,_,_),X).
%% subarray(1,$(_,X,_,_),X).
%% subarray(2,$(_,_,X,_),X).
%% subarray(3,$(_,_,_,X),X).

update_array_item(0,Index,Item,NewItem,NewItem) :- !.
update_array_item(N,Index,Array,NewItem,NewArray) :-
   N1 is N-2,
   Subindex is Index >> N1 /\ 3,
   update_subarray(Subindex,Array,Array1,NewArray1,NewArray),
   update_array_item(N1,Index,Array1,NewItem,NewArray1).

update_subarray(I,'$',X,X1,Array) :- !, 
   update_subarray(I,$($,$,$,$),X,X1,Array).
update_subarray(0,$(W,X,Y,Z),W,W1,$(W1,X,Y,Z)).
update_subarray(1,$(W,X,Y,Z),X,X1,$(W,X1,Y,Z)).
update_subarray(2,$(W,X,Y,Z),Y,Y1,$(W,X,Y1,Z)).
update_subarray(3,$(W,X,Y,Z),Z,Z1,$(W,X,Y,Z1)).

subarray_to_list(K,0,M,Item,[N-Item|L],L) :- not_undef(Item), !,
   N is K+M.
subarray_to_list(K,N,M,$(A0,A1,A2,A3),L0,L) :-
   N>0, !,
   N1 is N-2,
   M1 is (K+M)<<2,
   subarray_to_list(0,N1,M1,A0,L0,L1),
   subarray_to_list(1,N1,M1,A1,L1,L2),
   subarray_to_list(2,N1,M1,A2,L2,L3),
   subarray_to_list(3,N1,M1,A3,L3,L).
subarray_to_list(_,_,_,_,L,L).

% test routines

test :- new_array(A),
	test(A).

test(A) :- nl,
	write('enter (r)eset, (i)nsert, (f)etch, (l)ist or (q)uit: '),
	read(C),
	C \== q, !,
	process(C, A, A1),
	!, test(A1).
test(_).

process(r, _, A) :- new_array(A),
	nl, write('new array = '), write(A), nl.
process(i, A, A1) :- nl,
	write('index value: '), read(Index),
	write('item to be added at array['), write(Index),
	write(']: '), read(Item),
	aset(Index, A, Item, A1),
	nl, write('array = '), write(A1), nl.
process(f, A, A) :- nl,
	write('index value: '), read(Index),
	write('item at array['), write(Index),
	write('] = '), 
	arefl(Index, A, Item),
	write(Item), nl.
process(l, A, A) :- nl,
	write('array = '),
	array_to_list(A, List),
	write(List), nl.
process(_, A, A) :- nl, write('command not recognized'), nl.


