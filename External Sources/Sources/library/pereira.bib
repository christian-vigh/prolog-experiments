

[Apt and van Emden 82]
     K. R. Apt and M. H. van Emden.
     Contributions to the Theory of Logic Programming.
     Journal of the ACM 29(3):841-862, July, 1982.
	 Foundations; SLD resolution; negation.


[Battani and Meloni 73]
     G. Battani and H. Meloni.
     Interpreteur du langage de programmation Prolog.
     Technical Report, Groupe d'Intelligence Artificielle, Universit'e
	d'Aix-Marseille II, Marseille, France, 1973.
	 Implementation; interpreter; FORTRAN.


[Belovari and Campbell 80]
     G. Belovari and J. A. Campbell.
     Generating contours of integration: an application of PROLOG in symbolic
	computing,
     In W. Bibel and R. Kowalski, Lecture Notes in Computer Science 87:  5th
	Conference on Automated Deduction, pages 14-23.  Springer-Verlag,
	Berlin, Germany, 1980.


[Bendl et al. 80]
     J. Bendl, P. Koves and P. Szeredi.
     The MPROLOG system.
     In S.-A. Tarnlund, editor, Proc. of the Logic Programming Workshop, pages
	201-209.  1980.
	 Implementation; interpreter; portability; modularity; CDL-2.


[Bergman & Kanoui 73]
     M. Bergman and H. Kanoui.
     Application of mechanical theorem proving to symbolic calculus.
     In Third International Symposium on Advanced Computing Methods in
	Theoretical Physics, C.N.R.S., 1973.
	 Application; algebraic manipulation; integration.


[Bergman and Kanoui 75]
     M. Bergman and H. Kanoui.
     Sycophante: Systeme de calcul formel et d'interrogation symbolique sur
	l'ordinateur.
     Technical Report, Groupe d'Intelligence Artificielle, Universit'e
	d'Aix-Marseille II, Marseille, France, October, 1975.
	 Application; algebraic manipulation; integration.


[Borning 80]
     A. Borning.
     A powerful matcher for algebraic equation solving.
     Working Paper 67, Dept. of Artificial Intelligence, University of
	Edinburgh, Scotland, May, 1980.


[Borning and Bundy 81]
     A. Borning and A. Bundy.
     Using matching in algebraic equation solving.
     In R. Schank, editor, Proc. of IJCAI-81, pages 466-471. IJCAI, 1981.
     Also available from Edinburgh as DAI Research Paper No. 158.
	 Application; extension; term matching.


[Bowen 82a]
     D. L. Bowen, L. Byrd, F. C. N. Pereira, L. M. Pereira and D. H. D. Warren.
     Decsystem-10 Prolog User's Manual.
     Occasional Paper 27, Dept. of Artificial Intelligence, University of
	Edinburgh, Scotland, November, 1982.
	 Manual; compiler; interpreter; DEC-10/20.


[Bowen 82b]
     K. A. Bowen.
     Concurrent Execution of Logic.
     In M. van Caneghem, editor, Proc. of the First International Logic
	Programming Conference, pages 26-30. ADDP-GIA, Facult'e des Sciences de
	Luminy, Marseille, France, September 14-17, 1982.
	 Foundations; abstract interpreter; concurrency.


[Bowen and Kowalski 81]
     K. A. Bowen and R. A. Kowalski.
     Almagamating Language and Metalanguage in Logic Programming.
     Technical Report, School of Computer and Information Science, Syracuse
	University, Syracuse, New York, 1981.
	 Foundations; theory manipulation; reflection.


[Boyer and Moore 72]
     R. S. Boyer and J S. Moore.
     The Sharing of Structure in Theorem-Proving Programs,
     In B. Meltzer and D. Michie, Machine Intelligence 7, pages 101-116.  John
	Wiley & Sons, New York, New York, 1972.
	 Precursor; implementation; representation of resolvents.


[Bruynooghe 76]
     M. Bruynooghe.
     An Interpreter for Predicate Logic Programs : Part 1.
     Report CW 10, Applied Maths. and Programming Division, Katholieke Univ.
	Leuven, Belgium, October, 1976.
	 Implementation; structure copying.


[Bruynooghe 80]
     M. Bruynooghe.
     Analysis of Dependencies to Improve the Behaviour of Logic Programs.
     In Lecture Notes in Computer Science 87:  5th Conference on Automated
	Deduction, pages 293-305. Springer-Verlag, Berlin, Germany, July 8-11,
	1980.
	 Control; backtracking; conflict detection.


[Bruynooghe 81]
     M. Bruynooghe.
     The Memory Management of Prolog Implementations,
     In S.-A. Tarnlund and K. Clark, Logic Programming.  Academic Press, 1981.
	 Implementation; interpreter; term copying; tail recursion.


[Bruynooghe 82]
     M. Bruynooghe.
     A Note on Garbage Collection in Prolog Interpreters.
     In M. van Caneghem, editor, Proc. of the First International Logic
	Programming Conference, pages 52-55. ADDP-GIA, Facult'e des Sciences de
	Luminy, Marseille, France, September 14-17, 1982.
	 Implementation;  structure  copying;  garbage  collection; determinate
	     computations.


[Bundy and Sterling 81]
     A. Bundy and L. S. Sterling.
     Meta-level Inference in Algebra.
     Research Paper 164, Dept. of Artificial Intelligence, University of
	Edinburgh, Scotland, September, 1981.
     Presented at the Workshop on Logic Programming for Intelligent Systems,
	Long Beach, California, 1981.
	 Application; extensions; algebraic reasoning; metalevel inference.


[Bundy and Welham 81]
     A. Bundy and B. Welham.
     Using meta-level inference for selective application of multiple rewrite
	rules in algebraic manipulation.
     Artificial Intelligence 16(2):189-212, 1981.
	 Application; metalevel reasoning; rewrite rules; algebra.


[Bundy et al. 79]
     A. Bundy, L. Byrd, G. Luger, C. Mellish, R. Milne and M. Palmer.
     Solving Mechanics Problems Using Meta-Level Inference.
     In Proc. of IJCAI-79, pages 1017-1027. IJCAI, 1979.
     Also available from Edinburgh as DAI Research Paper No. 112.
	 Application;  extensions;  mechanics;   problem   solving;   metalevel
	     reasoning.


[Bundy, Byrd and Mellish 82]
     A. Bundy, L. Byrd and C. Mellish.
     Special Purpose, but Domain Independent Inference Mechanisms.
     In Proc. of ECAI-82, pages 67-74. European Conference on Artificial
	Intelligence, 1982.
     Also available from Edinburgh as DAI Research Paper No. 179.
	 Application; problem solving; heuristics; metalevel reasoning.


[Byrd 80]
     L. Byrd.
     Understanding the control flow of PROLOG programs.
     In S.-A. Tarnlund, editor, Proc. of the Logic Programming Workshop, pages
	127-38.  1980.
	 Debugging; control flow; box model.


[Byrd et al. 80]
     L. Byrd, F. C. N.Pereira and D. H. D. Warren.
     A guide to version 3 of DEC-10 Prolog.
     Occasional Paper 19, Dept. of Artificial Intelligence, University of
	Edinburgh, Scotland, July, 1980.
	 Manual; compiler; interpreter.


[Clark 78]
     K. L. Clark.
     Negation as Failure,
     In H. Gallaire and J. Minker, Logic and Data Bases.  Plenum Press, New
	York, New York, 1978.
	 Foundations; iff; negation.


[Clark 79]
     K. Clark.
     The Control Component of a Logic Program.
     In AISB Summer School on Expert Systems, July, 1979.
	 Extensions; control; coroutining.


[Clocksin and Mellish 81]
     W. F. Clocksin and C. S. Mellish.
     Programming in Prolog.
     Springer-Verlag, Berlin, 1981.
	 Prolog tutorial.


[Coelho et al. 80]
     H. Coelho, J. C. Cotta and L. M. Pereira.
     How to solve it with PROLOG.
     Technical Report, Laboratorio Nacional de Engenharia Civil, 1980.
	 Collection of examples.


[Colmerauer 70]
     A. Colmerauer.
     Les Syst`emes-Q ou un Formalisme pour Analyser et Synth'etiser des Phrases
	sur Ordinateur.
     Internal Publication 43, D'epartement d'Informatique, Universit'e de
	Montreal, Canada, 1970.
	 Precursor; grammar formalism; parsing.


[Colmerauer 78]
     A. Colmerauer.
     Metamorphosis Grammars,
     In L. Bolc, Natural Language Communication with Computers.  Springer-
	Verlag, Berlin, 1978.
     First appeared as `Les Grammaires de Metamorphose', Groupe d'Intelligence
	Artificielle, Universit'e de Marseille II, November 1975.
	 Foundations; application; grammar formalism; parsing.


[Colmerauer 79]
     A. Colmerauer.
     Les Bases Theoriques de Prolog.
     Technical Report, Groupe d'Intelligence Artificielle, Universit'e
	d'Aix-Marseille II, 1979.
	 Foundations; rewrite-rule systems; circular terms.


[Colmerauer 82]
     A. Colmerauer.
     An Interesting Subset of Natural Language,
     In K.L. Clark and S.-A. Tarnlund, Logic Programming.  Academic Press, New
	York, New York, 1982.
	 Application; natural language semantics.


[Colmerauer et al. 73]
     A. Colmerauer, H. Kanoui, R. Pasero and P. Roussel.
     Un systeme de comunication homme-machine en Francais.
     Rapport, Groupe d'Intelligence Artificielle, Universit'e d'Aix-Marseille
	II, 1973.
	 Application; natural language; historical first reference to Prolog.


[Colmerauer et al. 81]
     A. Colmerauer, H. Kanoui and M. Van Caneghem.
     Last Steps towards an Ultimate Prolog.
     In R. Schank, editor, Proc. of IJCAI-81, IJCAI, 1981.
	 Implementation;  interpreter; portability; virtual machine; multilevel
	     interpreter; goal delaying; Apple II.


[Dahl 77]
     V. Dahl.
     Un systeme deductif d'interrogation de banques de donnees en Espagnol.
     Technical Report, Groupe d'Intelligence Artificielle, Universit'e
	d'Aix-Marseille II, 1977.
	 Application; natural language; semantic interpretation.


[Dahl 79]
     V. Dahl.
     Quantification in Three-valued Logic for Natural Language Question-
	Answering Systems.
     In IJCAI-79, pages 182-187.  Tokyo, August, 1979.
	 Application; natural lamguage; embedded formalism.


[Dahl 81]
     V. Dahl.
     Translating Spanish into Logic through Logic.
     American Journal of Computational Linguistics 7(3):149-164, 1981.
	 Application; natural language; grammar; semantic interpretation.


[Darvas et al. 77]
     F. Darvas, I. Futo and P. Szeredi.
     Logic Based Program System for Predicting Drug Interactions.
     Int. J. of Biomedical Computing, 1977.
	 Application; deductive database; expert system.


[Ennals 82]
     R. Ennals.
     Teaching Logic as a Computer Language in Schools.
     In M. van Caneghem, editor, Proc. of the First International Logic
	Programming Conference, pages 99-104. ADDP-GIA, Facult'e des Sciences
	de Luminy, Marseille, France, September 14-17, 1982.
	 Teaching; Micro-Prolog.


[Ennals 83]
     R. Ennals.
     Beginning micro-PROLOG.
     Ellis Horwood and Heinemann, Chichester, England, 1983.
	 Textbook; teaching; Micro-Prolog.


[Fuchi 81]
     K. Fuchi.
     Aiming for Knowledge Information Processing Systems.
     In Proc. of International Conference on Fifth Generation Computer
	Systems, pages 2-15 - 2-28. Japan Information Processing Development
	Center, October, 1981.
	 Survey; research program; fifth generation.


[Furokawa et al. 82]
     K. Furokawa, K. Nitta and Y. Matsumoto.
     Prolog Interpreter Based on Concurrent Programming.
     In M. van Caneghem, editor, Proc. of the First International Logic
	Programming Conference, pages 38-44. ADDP-GIA, Facult'e des Sciences de
	Luminy, Marseille, France, September 14-17, 1982.
	 Implementation; abstract interpreter; concurrent interpretation.


[Futo et al. 78]
     I. Futo, F. Darvas and P. Szeredi.
     The application of PROLOG to the development of QA and DBM systems.
     In H.Gallaire and J. Minker, editor, Logic and databases, pages 347-375.
	Plenum Press, New York, 1978.


[Gallaire 81]
     H. Gallaire.
     Impacts of Logic on Data Bases.
     In Proc. Seventh International Conference on Very Large Data Bases, pages
	272-281. IEEE Computer Society Press, Cannes, France, September 9-11,
	1981.
	 Survey.


[Gregory 80]
     S. Gregory.
     Towards the Compilation of Annotated Logic Programs.
     Report CCD 80/16, Imperial College, London, 1980.
	 Compilation; control annotations; coroutining; global optimization.


[Gutierrez 82]
     C. Gutierrez.
     Prolog Compared with LISP.
     In ACM Symposium on LISP and Functional Programming, ACM, 1982.
	 Practice; language comparison; misinformation.


[Hammond 80]
     P. Hammond.
     Logic Programming for Expert Systems.
     Master's thesis, Imperial College, London, 1980.
	 Application; expert systems; embedded systems.


[Hill 74]
     R. Hill.
     Lush-Resolution and its completeness.
     DCL Memo 78, Dept. of Artificial Intelligence, University of Edinburgh,
	Scotland, August, 1974.
	 Foundations; precursor; completeness proof.


[Hirschman and Puder 82]
     L. Hirschman and K. Puder.
     Restriction Grammar in Prolog.
     In M. van Caneghem, editor, Proc. of the First International Logic
	Programming Conference, pages 85-90. ADDP-GIA, Facult'e des Sciences de
	Luminy, Marseille, France, September 14-17, 1982.
	 Application;    natural    language;    grammar    formalism;     tree
	     transformations.


[Jaffar et al. 83]
     J. Jaffar, J.-L. Lassez and J. W. Lloyd.
     Completeness of the Negation as Failure Rule.
     Technical Report 83/1, Dept. of Computer Science, University of Melbourne,
	Melbourne, Australia, 1983.
	 Foundations; negation; closed-world assumption; completeness proof.


[Kahn 82]
     K. M. Kahn.
     A Partial Evaluator of Lisp Programs Written in Prolog.
     In M. van Caneghem, editor, Proc. of the First International Logic
	Programming Conference, pages 19-25. ADDP-GIA, Facult'e des Sciences de
	Luminy, Marseille, France, September 14-17, 1982.
	 Application; partial evaluation; high level compilation.


[Kowalski 74]
     R. A. Kowalski.
     Logic for Problem Solving.
     DCL Memo 75, Dept. of Artificial Intelligence, University of Edinburgh,
	Scotland, March, 1974.
	 Foundations; controlled deduction; axiomatizations; planning; parsing.


[Kowalski 79]
     R. A. Kowalski.
     Algorithm = Logic + Control.
     Communications of the ACM 22(7):424-436, July, 1979.
	 Foundations; theorem proving; control of deduction.


[Kowalski 80]
     R. A. Kowalski.
     Logic for Problem Solving.
     North Holland, New York, New York, 1980.
	 Textbook;   knowledge   representation;  deduction;  problem  solving;
	     planning; belief revision.


[Kowalski and Kuehner 71]
     R. A. Kowalski and D. Kuehner.
     Linear Resolution with selection function.
     Artificial Intelligence 2:227-60, 1971.
	 Foundations; precursor; clausal logic; completeness proof.


[L.Pereira 82]
     L. M. Pereira, P. Sabatier and E. Oliveira.
     Orbi: an Expert-System for Environmental Resource Evaluation through
	Natural Language.
     In M. van Caneghem, editor, Proc. of the First International Logic
	Programming Conference, pages 200-209. ADDP-GIA, Facult'e des Sciences
	de Luminy, Marseille, France, September 14-17, 1982.
	 Application; expert system; natural language.


[L.Pereira et al. 78]
     L. M. Pereira, F. C. N. Pereira and D. H. D. Warren.
     User's guide to DECsystem-10 Prolog.
     Technical Report, Dept. of Artificial Intelligence, University of
	Edinburgh, Scotland, 1978.
	 Manual; compiler; interpreter; DEC-10.


[Lloyd 81]
     J. W. Lloyd.
     Implementing Clause Indexing in Deductive Database Systems.
     Technical Report 81/4, Dept. of Computer Science, University of Melbourne,
	Melbourne, Australia, 1981.
	 Implementation; clause indexing; partial match  retrieval;  extensible
	     hashing.


[Markusz 77]
     Z. Markusz.
     How to design variants of flats using the programming language PROLOG
	based on mathematical logic.
     In Proc. IFIP 77, pages pp 885-889. North Holland, 1977.
	 Application; architecture; constraint satisfaction; search.


[McCabe 81]
     F.G. McCabe.
     Micro-Prolog, Programmer's Reference Manual
     Logic Programming Associates Ltd., 1981.
	 Manual; interpreter; Lisp syntax; Z80.


[McCord 81]
     M. C. McCord.
     Focalizers, the Scoping Problem, and Semantic Interpretation Rules in
	Logic Grammars.
     Presented to the Workshop on Logic Programming for Intelligent Systems,
	Logicon Inc., Long Beach, California.
	 Application; natural language; quantification.


[McCord 82]
     M. C. McCord.
     Using Slots and Modifiers in Logic Grammars for Natural Language.
     Artificial Intelligence 18(3):327-367, 1982.
	 Application;    natural    language;   grammar   formalism;   semantic
	     interpretation.


[Mellish 81]
     C. S. Mellish.
     An Alternative to Structure-Sharing in the Implementation of A Prolog
	Interpreter,
     In S.-A. Tarnlund and K. Clark, Logic Programming.  Academic Press, 1981.
	 Implementation; term copying; interpreter.


[Monteiro 82]
     L. F. Monteiro.
     A Horn Clause-Like Logic For Specifying Concurrency.
     In M. van Caneghem, editor, Proc. of the First International Logic
	Programming Conference, pages 1-8. ADDP-GIA, Facult'e des Sciences de
	Luminy, Marseille, France, September 14-17, 1982.
	 Foundations; extension; concurrency; communication.


[Neves et al. 82]
     J. Neves, R. Backhouse and S. Anderson.
     A Prolog Implementation of Query-by-Example.
     Forthcoming.
	 Application; databases; query language; integrity constraints.


[Parsaye 83]
     K. Parsaye.
     Database Management, Knowledge Base Management and Expert System
	Development in Prolog.
     In Proc. of 1983 ACM Database Week, ACM, 1983.
	 Application; databases; dependencies; integrity.


[Pasero 73]
     R. Pasero.
     Representation du Fran,cais en Logique du Premier Ordre, en Vue de
	Dialoguer avec un Ordinateur.
     Th`ese de 3`eme Cycle, Groupe d'Intelligence Artificielle, Universit'e
	d'Aix-Marseille II, 1973.
	 Application; natural language; deductive system.


[Pereira 81a]
     F. C. N. Pereira.
     Ambiguity in Logic Grammars.
     Presented to the Workshop on Logic Programming for Intelligent Systems,
	Logicon Inc., Long Beach, California.


[Pereira 81b]
     F. C. N. Pereira.
     Extraposition Grammars.
     American Journal of Computational Linguistics 7(4):243-256, October-
	December, 1981.
	 Application; natural language; grammar formalism.


[Pereira 82a]
     F. C. N. Pereira.
     Logic for Natural Language Analysis.
     PhD thesis, University of Edinburgh, 1982.
     Reprinted as Technical Note 275, January 1983, Artificial Intelligence
	Center, SRI International, Menlo Park, California.
	 Application;   natural   language;   grammar    formalism;    semantic
	     interpretation.


[Pereira 82b]
     L. M. Pereira.
     Logic Control With Logic.
     In M. van Caneghem, editor, Proc. of the First International Logic
	Programming Conference, pages 9-18. ADDP-GIA, Facult'e des Sciences de
	Luminy, Marseille, France, September 14-17, 1982.
	 Extension; control; coroutining.


[Pereira 83]
     F. C. N. Pereira.
     Can Drawing Be Liberated from the von Neumann Style.
     In Proc. of 1983 ACM Database Week, ACM, 1983.
	 Application; graphics; design databases.


[Pereira and Porto 80]
     L. M. Pereira and A. Porto.
     Selective Backtracking for Logic Programs.
     In Lecture Notes in Computer Science 87:  5th Conference on Automated
	Deduction, pages 306-317. Springer-Verlag, Berlin, Germany, July 8-11,
	1980.
	 Control; backtracking; conflict detection.


[Pereira and Warren 80]
     F. C. N. Pereira and D. H. D. Warren.
     Definite Clause Grammars for Language Analysis - a Survey of the Formalism
	and a Comparison with Augmented Transition Networks.
     Artificial Intelligence 13:231-278, 1980.
	 Application; natural language grammars; parsing.


[Pereira and Warren 83]
     F. C. N. Pereira and D. H. D. Warren.
     Parsing as Deduction.
     In Proc. of the 21st Annual Meeting of the Association for Computational
	Linguistics, MIT, Cambridge, Massachusetts, June 15-17, 1983.
	 Foundations; grammar formalisms; Earley deduction; parsing.


[Pique 81]
     J. F. Pique.
     Sur un Mod`ele Logique du Language Naturel et son Utilisation pour
	L'Interrogation des Banques de Don'ees.
     Th`ese de 3`eme Cycle, Groupe d'Intelligence Artificielle, Universit'e
	d'Aix-Marseille II, 1981.
	 Application; natural language.


[Porto 82]
     A. Porto.
     Epilog: a Language for Extended Programming in Logic.
     In M. van Caneghem, editor, Proc. of the First International Logic
	Programming Conference, pages 31-37. ADDP-GIA, Facult'e des Sciences de
	Luminy, Marseille, France, September 14-17, 1982.
	 Extension; control; coroutining.


[Reiter 78]
     R. Reiter.
     On Closed World Data Bases,
     In H. Gallaire and J. Minker, Logic and Databases.  Plenum Press, New
	York, New York, 1978.
	 Foundations; closed-world assumption; defaults.


[Roberts 77]
     G. M. Roberts.
     An implementation of Prolog.
     Master's thesis, Dept of Computer Science, University of Waterloo, Canada,
	1977.
	 Implementation; structure sharing; IBM 370.


[Robinson 65]
     J. A. Robinson.
     A Machine-Oriented Logic Based on the Resolution Principle.
     Journal of the ACM 12:23-44, January, 1965.
	 Foundations; resolution; unification.


[Robinson and Sibert 80]
     J. A. Robinson and E. E. Sibert.
     Logic Programming in Lisp.
     Technical Report 8-80, School of Computer and Information Science,
	Syracuse University, Syracuse, New York, December, 1980.
	 Extensions; variable control; breadth-first search; embedding in Lisp.


[Roussel 75]
     P. Roussel.
     Prolog: Manuel de R'ef'erence et Utilisation.
     Technical Report, Groupe d'Intelligence Artificielle, Universit'e
	d'Aix-Marseille II, Marseille, France, 1975.
	 Manual; interpreter; FORTRAN; description of the first Prolog system.


[Sabatier 80]
     P. Sabatier.
     Dialogues en Fran,cais avec un Ordinateur.
     Th`ese de 3`eme Cycle, Groupe d'Intelligence Artificielle, Universit'e
	d'Aix-Marseille II, 1980.
	 Application; natural language; ellipsis and anaphora.


[Shapiro 81]
     E. Y. Shapiro.
     An algorithm that infers theories from facts.
     In Proc. of IJCAI-81, pages 446-451. IJCAI, 1981.
	 Application; Foundations; induction; Horn-clause theories.


[Shapiro 82a]
     E. Y. Shapiro.
     Algorithmic Program Debugging.
     PhD thesis, Yale University, May, 1982.
     Also available as Computer Science Research Report no. 237.
	 Foundations; debugging; induction.


[Shapiro 82b]
     E. Y. Shapiro.
     Alternation and the Computational Complexity of Logic Programs.
     In M. van Caneghem, editor, Proc. of the First International Logic
	Programming Conference, pages 154-163bis. ADDP-GIA, Facult'e des
	Sciences de Luminy, Marseille, France, September 14-17, 1982.
	 Foundations; computational complexity, finite nondeterminism.


[Shapiro 83]
     E. Y. Shapiro.
     A Subset of Concurrent Prolog and Its Interpreter.
     Technical Report TR-003, ICOT - Institute for New Generation Computer
	Technology, Tokyo, Japan, January, 1983.
	 Extension;  concurrency;  goal  delaying;  don't-care  nondeterminism;
	     read-only variables; scheduling; operating systems.


[Siegel and Bossu 81]
     P. Siegel and G. Bossu.
     La Saturation au Secours de la Non-monotonie.
     Th`ese de 3`eme Cycle, Groupe d'Intelligence Artificielle, Universit'e
	d'Aix-Marseille II, 1981.
	 Extensions; decidable clausal theories; default reasoning;  indefinite
	     information.


[Skuce 82]
     D. R. Skuce.
     Expressing Qualitative Biomedical Knowledge Exactly Using the Language
	LESK.
     Comput. Biol. Med. 15(1):57-69, 1982.
	 Application; embedded language; knowledge representation; deduction.


[Sterling & Bundy 82]
     L. Sterling and A. Bundy.
     Meta-level Inference and Program Verification.
     In D. W. Loveland, editor, Lecture Notes in Computer Science 138:  6th
	Conference on Automated Deduction, pages 144-150. Springer-Verlag,
	1982.
     Also available from Edinburgh as DAI Research Paper no. 168.
	 Application; program verification; metalevel inference.


[Sterling et al 82]
     L. Sterling, A. Bundy, L. Byrd, R. O'Keefe and B. Silver.
     Solving Symbolic Equations with PRESS.
     In J. Calmet, editor, Lecture Notes in Computer Science 144: Computer
	Algebra, pages 109-116. Springer-Verlag, 1982.
     Longer version available from Edinburgh as Research Paper 171.
	 Application; algebraic manipulation; metalevel inference.


[Swinson 82]
     P. S. G. Swinson.
     Logic Programming - a Computing Tool for the Architect of the Future.
     Computer-Aided Design 14(2), March, 1982.
	 Application; architecture; design databases.


[Swinson et al. ??]
     P. S. G. Swinson, F. C. N. Pereira and A. Bijl.
     A Fact Dependency System for the Logic Programmer.
     To appear in Computer-Aided Design.
	 Application; architecture; design databases; truth maintenance.


[Szeredi 77]
     P. Szeredi.
     Prolog - a Very High Level Language Based on Predicate Logic.
     In Second Hungarian Conference on Computer Science, Budapest, June, 1977.
	 General; implementation; portablility.


[Tarnlund 80]
     S.-A. Tarnlund (ed.).
     Proc. of the 1980 Logic Programming Workshop, Debrecen, Hungary.
     Dept. of Computer Science, Univ. of Stockholm, Sweden.
	 Various; superseded in part by [Tarnlund and Clark 81].


[van Emden 82]
     M. van Emden.
     An Interpreting Algorithm for Prolog Programs.
     In M. van Caneghem, editor, Proc. of the First International Logic
	Programming Conference, pages 56-64bis. ADDP-GIA, Facult'e des Sciences
	de Luminy, Marseille, France, September 14-17, 1982.
	 Foundations;  rational  reconstruction; abstract interpreter; stepwise
	     refinement.


[van Emden and Kowalski 76]
     M. H. van Emden and R. A. Kowalski.
     The Semantics of Predicate Logic as a Programming Language.
     Journal of the ACM 23(4):733-742, October, 1976.
	 Foundations; logical semantics; fixpoint semantics.


[Warren 74]
     D. H. D. Warren.
     WARPLAN: A system for generating plans.
     DCL Memo 76, Dept. of Artificial Intelligence, University of Edinburgh,
	Scotland, 1974.
	 Application; planning; STRIPS; plan merging.


[Warren 76]
     D. H. D. Warren.
     Generating conditional plans and programs.
     In AISB Summer Conference, Edinburgh, Scotland, July, 1976.
	 Application; planning; automatic programming; conditional plans.


[Warren 77]
     D. H. D. Warren.
     Implementing Prolog - compiling predicate logic programs.
     Research Reports 39 and 40, Dept. of Artificial Intelligence, University
	of Edinburgh, Scotland, May, 1977.
	 Implementation;  compilation;  structure-sharing; abstract instruction
	     set; space recovery; DEC-10/20.


[Warren 79]
     D. H. D. Warren.
     Prolog on the DECsystem-10,
     In D. Michie, Expert Systems in the Micro-Electronic Age.  Edinburgh
	University Press, Edinburgh, Scotland, 1979.
	 Implementation; compilation; abstract instruction set.


[Warren 80a]
     D. H. D. Warren.
     Logic programming and compiler writing.
     Software Practice and Experience 10:97-125, 1980.
	 Application; compilers; logical variable; prototypes.


[Warren 80b]
     D. H. D. Warren.
     An Improved Prolog Implementation Which Optimises Tail Recursion.
     Research Paper 156, Dept. of Artificial Intelligence, University of
	Edinburgh, Scotland, 1980.
	 Implementation; compiler; virtual machine; tail recursion.


[Warren 81]
     D. H. D. Warren.
     Efficient Processing of Interactive Relational Database Queries Expressed
	in Logic.
     In Proc. Seventh International Conference on Very Large Data Bases, pages
	272-281. IEEE Computer Society Press, Cannes, France, September 9-11,
	1981.
	 Application; extension; query optimization.


[Warren 82]
     D. H. D. Warren.
     Higher-Order Extensions to Prolog - Are They Needed?,
     In Hayes, Michie and Pao, Machine Intelligence 10.  Ellis Horwood, 1982.
	 Extensions; predicate objects; sets.


[Warren and Pereira 83]
     D. H. D. Warren and F. C. N. Pereira.
     An Efficient Easily Adaptable System for Interpreting Natural Language
	Queries.
     To appear in the American Journal of Computational Linguistics, 1983.
	 Application; natural language; query planning; database retrieval.


[Warren et al. 77]
     D. H. D. Warren, L. M. Pereira and F. C. N. Pereira.
     Prolog - The Language and its Implementation Compared with Lisp.
     In SIGPLAN/SIGART Newsletter, ACM Symposium on A. I. and Programming
	Languages, August, 1977.
	 Language; implementation; compilation.
